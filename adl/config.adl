module config
{
import types.FilePath;
import types.S3Path;
import types.EndPointLabel;
import sys.types.Map;
import sys.types.Pair;
import sys.types.Maybe;

/// Configuration file for the deployment tool
struct ToolConfig {
    FilePath releasesDir = "/opt/releases";
    FilePath contextCache = "/opt/etc/deployment";
    FilePath logFile = "/opt/var/log/hx-deploy-tool.log";
    FilePath letsencryptPrefixDir = "/opt";
    FilePath letsencryptWwwDir = "/opt/var/www";

    /// If the deploy tool needs to generate an SSL certificate
    /// using letsencrypt, it will be called this.
    String autoCertName = "hxdeploytoolcert";
    String autoCertContactEmail = "";

    /// The storage location for release zip files
    BlobStoreConfig releases;

    Vector<DeployContext> deployContexts;
    DeployMode deployMode;

    // Support for AWS health checks in proxy mode
    Maybe<HealthCheckConfig> healthCheck = { "just": {
       "incomingPath" : "/health-check",
       "outgoingPath" : "/"
    }};
};

union DeployMode {
   ProxyModeConfig proxy;
};

union BlobStoreConfig {
   S3Path s3;
   FilePath localdir;
};


struct ProxyModeConfig {
    /// The configured endpoints.
    StringMap<EndPoint> endPoints;

    /// If set, we are in remote mode, with state stored at this S3 path
    Maybe<S3Path> remoteStateS3 = "nothing";

    /// When we start deploys we choose a port from this range
    Pair<Word32,Word32> dynamicPortRange = {"v1":8000, "v2":8100};

    /// How we generate identifiers for slave machines
    MachineLabel slaveLabel = "ec2InstanceId";

    /// The mustache template to used be for the proxy nginx configuration
    /// If not provided the builtin template will be used.
    Maybe<FilePath> nginxConfTemplatePath = "nothing";
};

struct HealthCheckConfig {
    // The path upon which we expect the AWS Target Group to request
    /// a health check;
    String incomingPath;

    /// The path to which will will proxy the above on the first
    /// configured endpoint
    String outgoingPath;
};

union MachineLabel {
  String label;
  Void ec2InstanceId;
};

// A proxy exposed endpoint
struct EndPoint {
  EndPointLabel label;
  Vector<String> serverNames;
  EndPointType etype;
};

union EndPointType {
  Void httpOnly;
  SslCertMode httpsWithRedirect;
};

union SslCertMode {
  /// Use letsencrypt to generate a certificate
  Void generated;

  /// Use the existing certificate from the given file system
  /// paths
  SslCertPaths explicit;
};

struct SslCertPaths {
  FilePath sslCertificate;
  FilePath sslCertificateKey;
};

struct DeployContext
{
    String name;
    DeployContextSource source;
};

union DeployContextSource
{
    // Context from a local file
    FilePath file;

    /// Context from an S3 object
    S3Path s3;

    /// Context from AWS secrets manager secret
    String awsSecretArn;
};

union Verbosity
{
  Void quiet;
  Void noisy;
};


/// Configuration specification for the letsencrypt related functions
struct LetsEncryptConfig
{
  /// The path to the install certbot executable
  String certbotPath;

  /// The ID of the AWS hosted zone containing the SSL DNS entries
  String awsHostedZoneId;

  /// The directory within which certbot will it's working files
  /// and live certificates
  String basedir;

  /// The email address that certbot will use for essential communications
  String email;

  /// The fully scoped DNS names required on the certificate
  Vector<String> domains;

  /// How much logging output to generate
  Verbosity verbosity = "quiet";
};

};
